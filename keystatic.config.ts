import { collection, config, fields, singleton } from "@keystatic/core";

const collectionConfig = (
  label: string,
  path: string,
  subcategories: string[],
) =>
  collection({
    label: label,
    slugField: "title",
    path: `src/content/docs/${path}/*`,
    format: { contentField: "content" },
    entryLayout: "content",
    columns: ["title", "description", "subcategory", "lastUpdated"],
    schema: {
      title: fields.slug({
        name: {
          label: "Title",
          description:
            "You must provide a title for every page. This will be displayed at the top of the page, in browser tabs, and in page metadata.",
        },
      }),
      description: fields.text({
        label: "Description",
        description:
          "The page description is used for page metadata and will be picked up by search engines and in social media previews.",
      }),
      subcategory: fields.select({
        label: "Subcategory",
        defaultValue: "none",
        options: [
          { value: "none", label: "None" },
          ...subcategories.map((subcategory) => ({
            label: `${subcategory[0].toUpperCase()}${subcategory.slice(1)}`,
            value: subcategory,
          })),
        ],
      }),
      template: fields.select({
        label: "Template",
        defaultValue: "doc",
        options: [
          { value: "doc", label: "Default (doc)" },
          { value: "splash", label: "Full Width (splash)" },
        ],
      }),
      lastUpdated: fields.date({
        label: "Last Updated",
        description:
          "The date this page was last updated. This is displayed at the bottom of the page.",
      }),
      sidebar: fields.object({
        label: fields.text({
          label: "Sidebar Title",
          description:
            "Set the label for this page in the sidebar when displayed in an autogenerated group of links.",
        }),
        order: fields.number({
          label: "Order",
          description:
            "Control the order of this page when sorting an autogenerated group of links. Lower numbers are displayed higher up in the link group.",
        }),
        hidden: fields.checkbox({
          label: "Hide in Sidebar",
          description:
            "Prevents this page from being included in an autogenerated sidebar group.",
        }),
        requiresAuth: fields.checkbox({
          label: "Requires Authentication",
          description:
            "If checked, this page will only be accessible to authenticated users.",
        }),
        banner: fields.object({
          content: fields.text({ label: "Banner Text" }),
        }),
        // badge: fields.object({
        //   text: fields.text({ label: "Badge title" }),
        //   variant: fields.select({
        //     label: "Badge variant",
        //     defaultValue: "",
        //     options: [
        //       { value: "", label: "None" },
        //       // 'note' | 'tip' | 'caution' | 'danger' | 'success' | 'default'
        //       { value: "note", label: "Note" },
        //       { value: "tip", label: "Tip" },
        //       { value: "caution", label: "Caution" },
        //       { value: "danger", label: "Danger" },
        //       { value: "success", label: "Success" },
        //       { value: "default", label: "Default" },
        //     ],
        //   }),
        // }),
      }),
      content: fields.mdx({
        label: "Content",
        options: {
          image: {
            directory: "src/assets/images/",
            publicPath: "@assets/images/",
          },
        },
      }),
    },
  });

export default config({
  storage: {
    kind: process.env.NODE_ENV === "development" ? "local" : "github",
    repo: "limegorilla/starlight-starter-with-keystatic",
    pathPrefix: "apps/docs",
  },

  ui: {
    brand: {
      name: "Company Documentation",
    },
  },
  // Edit the below collections to add/modify content
  collections: {
    processes: collectionConfig("Processes", "processes", []),
    guides: collectionConfig("Guides", "guides", []),
    research: collectionConfig("Research", "research", []),
  },
  singletons: {
    settings: singleton({
      label: "Settings",
      schema: {
        lol: fields.blocks(
          {
            // Second block option is a link to a URL
            url: {
              label: "URL",
              schema: fields.text({ label: "URL" }),
            },
          },
          { label: "Links" },
        ),
      },
    }),
  },
});
